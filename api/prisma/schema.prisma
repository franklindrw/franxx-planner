// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum EventUserRole {
  ORGANIZER
  PARTICIPANT
}

enum EventUserStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  first_name    String
  last_name     String
  password      String?
  picture       String?
  google_id     String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("USERS")
  @@index([email], name: "idx_users_email")
  @@index([google_id], name: "idx_users_google_id")

  EventsUsers EventsUsers[]
  EventComments EventComment[]
}

model Event {
  id                Int         @id @default(autoincrement())
  title             String      @db.VarChar(100)
  description       String?
  date              DateTime?
  time              String?     @db.VarChar(10)
  address           String?     @db.VarChar(100)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("EVENTS")

  EventsUsers EventsUsers[]
  EventLinks EventLink[]
  EventComments EventComment[]
}

model EventsUsers {
  id                Int               @id @default(autoincrement())
  event             Event            @relation(fields: [event_id], references: [id], onDelete: Cascade)
  event_id          Int
  user              User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id           Int
  role              EventUserRole
  status            EventUserStatus   @default(PENDING)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("EVENTS_USERS")
  @@index([event_id], name: "idx_events_users_event_id")
  @@index([user_id], name: "idx_events_users_user_id")
}

model EventLink {
  id                Int         @id @default(autoincrement())
  event_id          Int
  title             String      @db.VarChar(100)
  link              String      @db.VarChar(250)
  event             Event      @relation(fields: [event_id], references: [id], onDelete: Cascade)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("EVENT_LINKS")
  @@index([event_id], name: "idx_event_links_event_id")
}

model EventComment {
  id                Int         @id @default(autoincrement())
  event             Event      @relation(fields: [event_id], references: [id], onDelete: Cascade)
  event_id          Int
  user              User?      @relation(fields: [user_id], references: [id], onDelete: SetNull)
  user_id           Int?
  comment           String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("EVENT_COMMENTS")
  @@index([event_id], name: "idx_event_comments_event_id")
  @@index([user_id], name: "idx_event_comments_user_id")
}
